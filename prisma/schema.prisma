// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Define enum for verification status
enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   Patron   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Patron {
    id             String    @id @default(cuid())
    firstName      String
    lastName       String
    email          String    @unique
    password       String
    username       String?   @unique
    profileImage   String?   @default("default-profile.png")
    bio            String?   @default("")
    interests      String[]  @default([])  // Array of food interests
    emailVerified  DateTime?
    isCertifiedFoodie Boolean @default(false)  // New field for certified foodie status
    certificationDate DateTime? // When they became a certified foodie
    certificationRequest CertificationRequest? // Relation to certification request

    // Relations
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    reviews       Review[] 
    userVotes     UserVotes[]
    
    // New relations
    favorites     Favorite[]
    followers     Follow[]    @relation("following")
    following     Follow[]    @relation("follower")  
}

// New model for foodie certification requests
model CertificationRequest {
    id              String    @id @default(cuid())
    createdAt       DateTime  @default(now())
    status          String    @default("pending") // pending, approved, rejected
    justification   String?   // Why they think they should be certified
    socialMediaLink String?   // Optional link to social media profile
    reviewedAt      DateTime?
    reviewedBy      String?   // Admin who reviewed the request
    
    // Relation to patron
    patron        Patron    @relation(fields: [patronId], references: [id], onDelete: Cascade)
    patronId      String    @unique // One request per patron
}

// New model for bookmarks/favorites
model Favorite {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    
    // Relations
    patron        Patron    @relation(fields: [patronId], references: [id], onDelete: Cascade)
    patronId      String
    
    // Polymorphic relation - can favorite restaurants or reviews
    restaurantId  String?
    restaurant    Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    
    reviewId      String?
    review        Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    
    // Ensure a patron can only favorite each item once
    @@unique([patronId, restaurantId])
    @@unique([patronId, reviewId])
}

model Account {
    id                       String  @id @default(cuid())
    patronId                 String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    
    patron                   Patron  @relation(fields: [patronId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Restaurateur {
  id                      String             @id @default(cuid())
  email                   String             @unique
  password                String
  restaurantName          String
  businessRegNumber       String?            // Required for approval
  vatNumber               String?            // Optional but stored for business purposes
  addressLine1            String
  addressLine2            String?
  city                    String
  postalCode              String
  country                 String
  contactPersonName       String
  contactPersonPhone      String
  contactPersonEmail      String
  verificationStatus      VerificationStatus @default(PENDING)
  submittedAt             DateTime           @default(now())
  approvedAt              DateTime?
  
  // Proof documents (stored as URLs)
  utilityBillUrl          String?
  businessLicenseUrl      String?
  foodHygieneCertUrl      String?
  storefrontPhotoUrl      String?
  receiptPhotoUrl         String?
  
  // Relations
  restaurant              Restaurant?        @relation(fields: [restaurantId], references: [id])
  restaurantId            String?
  
  // Authentication - these are used once the restaurateur is approved
  accounts                RestaurateurAccount[]
  sessions                RestaurateurSession[]
  connectionRequests      RestaurantConnectionRequest[]
}

// Model for restaurant connection requests
model RestaurantConnectionRequest {
  id              String    @id @default(cuid())
  restaurateurId  String
  restaurantId    String
  status          String    @default("pending") // pending, approved, rejected
  message         String?   // Optional message from restaurateur
  submittedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?
  
  // Relations
  restaurateur    Restaurateur @relation(fields: [restaurateurId], references: [id], onDelete: Cascade)
  restaurant      Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@unique([restaurateurId, restaurantId])
}

model RestaurateurAccount {
  id                       String    @id @default(cuid())
  restaurateurId           String
  
  // Authentication fields from OAuth providers
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  
  // Added fields to mirror Restaurateur model for login purposes
  email                    String?   @unique
  password                 String?
  businessRegNumber        String?   // Required for login
  vatNumber                String?   // Optional validation data
  isApproved               Boolean   @default(true) // If an account exists, it's approved
  
  restaurateur             Restaurateur  @relation(fields: [restaurateurId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model RestaurateurSession {
  id               String   @id @default(cuid())
  sessionToken     String   @unique
  restaurateurId   String
  expires          DateTime
  restaurateur     Restaurateur @relation(fields: [restaurateurId], references: [id], onDelete: Cascade)
}

model Restaurant {
    id          String    @id @default(cuid())
    title       String
    url         String?   @unique  // Avoid duplicate menus
    detail      String?
    rating      String
    num_reviews String
    location    String?   // Store original scraped location
    category    String[]  @default([]) // Store multiple categories as an array
    interests   String[]  @default([])
    widerAreas  String[]  @default([]) // New field for wider geographical areas
    
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    menuSections MenuSection[]
    reviews      Review[] 
    favorites    Favorite[]
    restaurateurs Restaurateur[]
    connectionRequests RestaurantConnectionRequest[]
    receiptVerifications ReceiptVerification[]
}

model MenuSection {
    id           String      @id @default(cuid())
    category     String
    restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId String

    items        MenuItem[]

    interest     Interest?   @relation("MenuSectionInterest", fields: [interestId], references: [id], onDelete: SetNull)  
    interestId   String?
}

model MenuItem {
    id           String      @id @default(cuid())
    name         String
    description  String?
    price        String
    img_url      String?
    status       String
    totalUpvotes Int         @default(0) // Track how many upvotes a menu item has
    createdAt    DateTime    @default(now())

    menuSection   MenuSection  @relation(fields: [menuSectionId], references: [id], onDelete: Cascade)
    menuSectionId String

    // Inherit Interest from MenuSection
    interest     Interest?  @relation("MenuItemInterest", fields: [interestId], references: [id], onDelete: SetNull)  
    interestId   String?

    reviews     Review[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    patronId     String
    expires      DateTime
    patron       Patron   @relation(fields: [patronId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Interest {
    id           String         @id @default(cuid())
    name         String         @unique

    // Back-relations from MenuSection and MenuItem
    menuSections MenuSection[] @relation("MenuSectionInterest")
    menuItems    MenuItem[]    @relation("MenuItemInterest")
}

model Review {
    id              String   @id @default(cuid())
    content         String
    rating          Int      // 1-5 star rating
    upvotes         Int      @default(0)  // Number of upvotes
    createdAt       DateTime @default(now())
    
    imageUrl        String?
    videoUrl        String?
    asExpected      Int     @default(0)
    wouldRecommend  Int     @default(0)
    valueForMoney   Int     @default(0)
    latitude        Float?  @default(0)// Added for location services
    longitude       Float?  @default(0)// Added for location services
    isAnonymous     Boolean @default(false) // New field for anonymous reviews
    isVerified      Boolean @default(false) // Whether the review is verified
    restaurantResponse String? // Response from the restaurant

    // Optional relation to a specific menu item
    menuItem    MenuItem? @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
    menuItemId  String?
    
    // Relations
    patron      Patron   @relation(fields: [patronId], references: [id], onDelete: Cascade)
    patronId    String

    restaurant  Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId String
    votes       UserVotes[]
    favorites   Favorite[]
    flags       ReviewFlag[]
    receipts    ReceiptVerification[]
}

model Follow {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    
    // Relations
    follower      Patron    @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId    String
    
    following     Patron    @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId   String
    
    // Ensure unique follows
    @@unique([followerId, followingId])
}

model UserVotes {
    id          String   @id @default(cuid())
    userId      String
    reviewId    String
    isUpvote    Boolean  // true for upvote, false for downvote
    
    // Relations
    user        Patron   @relation(fields: [userId], references: [id], onDelete: Cascade)
    review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    
    // Each user can only vote once per review
    @@unique([userId, reviewId])
}

model TrendingCategory {
  id              String    @id @default(cuid())
  category        String    // The trending category name
  count           Int       // How many times this category appeared
  score           Float     // Calculated score (combines recency and popularity)
  lastUpdated     DateTime  @default(now())
  isActive        Boolean   @default(true)  // Whether this is the current trending category
  reviewIds       String[]  // IDs of reviews that contributed to this trend
  reviewCount     Int       // Total number of reviews analyzed
  
  @@index([isActive, lastUpdated])
}

model ReviewFlag {
  id            String    @id @default(cuid())
  reason        String    // hate_speech, misinformation, inappropriate, spam, other
  details       String?   // Additional details for 'other' reason
  createdAt     DateTime  @default(now())
  flaggedBy     String    // ID of the restaurateur who flagged it
  status        String    @default("pending") // pending, reviewed, dismissed
  reviewedAt    DateTime?
  
  // Relations
  review        Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId      String
}

model ReceiptVerification {
  id            String    @id @default(cuid())
  receiptImage  String    // URL to receipt image
  status        String    @default("pending") // pending, approved, rejected
  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?   // ID of the restaurateur who reviewed it
  
  // Relations
  review        Review?   @relation(fields: [reviewId], references: [id])
  reviewId      String?
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId  String
}