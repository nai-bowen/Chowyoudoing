// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   Patron   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Patron {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    email         String    @unique
    password      String
    interests     String[]  @default([])  // Array of food interests
    emailVerified DateTime?

    // Relations
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    reviews       Review[] 
}


model Account {
    id                       String  @id @default(cuid())
    patronId                 String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    
    patron                   Patron  @relation(fields: [patronId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Restaurant {
    id          String    @id @default(cuid())
    title       String
    url         String?   @unique  // Avoid duplicate menus
    detail      String?
    rating      String
    num_reviews String
    location    String?   // Store city, country for map feature
    category    String[]  @default([]) // Store multiple categories as an array

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    menuSections MenuSection[]
    reviews      Review[] // Add this line
}


model MenuSection {
    id           String      @id @default(cuid())
    category     String
    restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId String

    items        MenuItem[]

    interest     Interest?   @relation("MenuSectionInterest", fields: [interestId], references: [id], onDelete: SetNull)  
    interestId   String?
}

model MenuItem {
    id           String      @id @default(cuid())
    name         String
    description  String?
    price        String
    img_url      String?
    status       String
    totalUpvotes Int         @default(0) // Track how many upvotes a menu item has
    createdAt    DateTime    @default(now())

    menuSection   MenuSection  @relation(fields: [menuSectionId], references: [id], onDelete: Cascade)
    menuSectionId String

    // Inherit Interest from MenuSection
    interest     Interest?  @relation("MenuItemInterest", fields: [interestId], references: [id], onDelete: SetNull)  
    interestId   String?

     reviews     Review[]
}



model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    patronId     String
    expires      DateTime
    patron       Patron   @relation(fields: [patronId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Interest {
    id           String         @id @default(cuid())
    name         String         @unique

    // Back-relations from MenuSection and MenuItem
    menuSections MenuSection[] @relation("MenuSectionInterest")
    menuItems    MenuItem[]    @relation("MenuItemInterest")
}

// Add these fields to your Review model in schema.prisma
model Review {
    id          String   @id @default(cuid())
    content     String
    rating      Int      // 1-5 star rating
    upvotes     Int      @default(0)  // Number of upvotes
    createdAt   DateTime @default(now())
    
    // Add these fields
    imageUrl        String?
    videoUrl        String?
    asExpected      Int     @default(0)
    wouldRecommend  Int     @default(0)
    valueForMoney   Int     @default(0)

    // Optional relation to a specific menu item
    menuItem    MenuItem? @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
    menuItemId  String?
    // Relations
    patron      Patron   @relation(fields: [patronId], references: [id], onDelete: Cascade)
    patronId    String

    restaurant  Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId String
}