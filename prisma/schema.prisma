// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   Patron   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Patron {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    email         String    @unique
    password      String
    interests     String?   // Can be NULL
    emailVerified DateTime?
    
    // Relations
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model Account {
    id                       String  @id @default(cuid())
    patronId                 String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    
    patron                   Patron  @relation(fields: [patronId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Restaurant {
    id          String        @id @default(cuid())
    title       String
    detail      String?
    rating      String
    num_reviews String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    // Relations
    menuSections MenuSection[]
}

model MenuSection {
    id           String      @id @default(cuid())
    category     String
    restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
    restaurantId String

    // Relations
    items MenuItem[]
}

model MenuItem {
    id           String      @id @default(cuid())
    name         String
    description  String?
    price        String
    img_url      String?
    status       String

    menuSection   MenuSection  @relation(fields: [menuSectionId], references: [id], onDelete: Cascade)
    menuSectionId String
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    patronId     String
    expires      DateTime
    patron       Patron   @relation(fields: [patronId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
